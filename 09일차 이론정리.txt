변수 
 -참조변수 vs 일반변수(기본자료형으로 만들어진 변수)
	1) 일반 변수: 기본 자료형으로 만들어진 변수
	2) 참조 변수: 기본 자료형이 아닌 것들로 만들어진 변수. 
		   -> 배열, 객체(String) 등을 가리키는 변수. 

 - 매개변수(메소드를 실행하기 위해 필요한 정보를 전달하는 변수)
	- 인자 : 메소드를 실행하기 위해 실제 전달하는 값. 매개변수의 자리로 대입되는 값 자체를 말함.
 - 지역변수 : 메소드 안에서 선언되어서 사용되는 변수.
 - 멤버변수(필드) : 클래스 안에서 선언하는 변수들;
	- 인스턴스 필드 : 객체를 인스턴스로 호출하고 나서 사용가능한 필드들
	- 클래스 필드: static으로 선언되어 클래스로더에 직접 등록? 메모리상에 직접 올라가는 변수들

 메소드: (하나의) 기능을 하도록 모아놓은 코드
	: 재사용을 통해 코드의 길이를 줄여 경제성을 취함. 
	: 기능의 유지보수를 쉽게 하기 위해
	: 구조를 쉽게 파악 가능

메소드 오버로딩 : 동일한 메소드가 여러개 있는 것, '같은 이름의, 다른 매개변수를 지닌' 메소드를 여러번 선언
 	=> 매개변수가 다른 경우(데이터 형, 매개변수의 개수)
	- 같은 이름으로 같은 기능을 실행하는데 매개변수의 종류를 다양하게 만들 수 있다. 
	-> 다른 이름의 메소드를 만들 필요가 없음
	-> 편리함.

가변인자 => 매개변수의 개수가 미정일 때.
	: 데이터형 ...변수명

클래스 =>추상화를 통해 추출. 

	-필드    : 정보
	-생성자 : 필드를 초기화 
	-매소드 : 기능. 
=> 클래스를 통해 필드를 편리하게 관리하고, 필요한 기능을 구현하여 사용
	필요한 코드가 있으면 해당 클래스의 코드를 복붙할 필요 없이 해당 클래스를 호출하면 됨.

필드 초기화 순서
1. 필드 기본 값으로 초기화
2. 명시적 초기화 ( 필드 선언 후 = 을 통해 하는 초기화)
3.  초기화 블록 : {}
4. 생성자

static
 -같은 클래스로 만들어진 모든 객체들이 공유하는 필드/ 메소드에 붙이는 예약어/키워드

-static 필드, 메소드는 클래스 명으로 호출   ↔ 인스턴스 명으로 호출하는 인스턴스 필드와 인스턴스 메소드 

-클래스가 메모리에 로딩이 되면 static 필드와 static 메소드가 생성

cf)static이 안붙는 필드와 메소드 (=인스턴스 필드/ 인스턴스 메소드)
- 각 객체마다 필드/메소드를 가짐
- 생성 시점 : 객체를 생성하는 시점

static 필드/메소드 (=클래스 필드/메소드)=> static메소드/객체메소드에서 사용 가능

인스턴스 필드/인스턴스 메소드 => 객체 메소드에서 사용 가능( static 메소드에서는 기본적으로 객체를 만들지 않고 수행되기 때문)


final 필드 : 상수 => 값을 변경할 수 없다.
	메소드와 클래스에도 붙을 수 있음.










인터페이스 : 클래스 간의 매개로 작용하는 요소
	추상메소드(선언부만 존재하는 메소드)
implements로 구성