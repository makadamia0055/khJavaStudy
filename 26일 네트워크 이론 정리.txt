네트워크 
여러대의 컴퓨터를 통신회선으로 연결한 것

서버와 클라이언트
서버 : 서비스 제공자, 클라이언트의 연결을 수락하고 요청 내용을 처리 후 응답을 보내는 역할

ip주소 
네트워크 상에서 컴퓨터를 식별하는 번호로 네트워크 어댑터마다 할당되어 있음.
 ipv4 3.3.3.3

iot등으로 할당되는 ip주소가 많아지자 ipv6가 등장 
일반적으로 확인하는거는 ipv4로 생각하면 됨.

포트 : 같은 컴퓨터 내에서 프로그램을 식별하는 번호
클라이언트는 서버 연결 요청시 ip주소와 포트 번호를 알아야함
192.168.xxx.xxx = > 공유기를 통한 IP로 외부에서 접근할 수 없음.
127.0.0.1 -> localhost로 내부에서 지칭하는 내 pc IP주소

InetAddress 클래스
 ip주소를 다루기 위해서 자바에서 제공하는 클래스

소켓 프로그래밍

소켓을 이용한 통신 프로그래밍

소켓 프로세스 간의 통신에 사용되는 양쪽 끝 단

TCP :  데이터 전송 속도가 느리지만 정확하고 안정적으로 전달할 수 있는 연결 지향적 프로토콜
TCP/IP 보통 IP를 활용해 TCP통신을 해서 TCP/IP라고 묶어 부름

UDP : 데이터 전송 속도가 빠르지만 신뢰성 없는 데이터를 전송하는 비연결 지향적 프로토콜


TCP 소켓 프로그래밍
클라이언트와 서버간 1:1 소켓 통신

서버가 먼저 실행되어 클라이언트의 요청을 기다려야하고
서버용 프로그램과 클라이언트 프로그램을 따로 구현해야함
자바에서는 TCP소켓 프로그래밍을 위해 java.net패키지에서 ServerSocket과 socket클래스 제공

1. 서버에서 서버 소켓 열고 포트 번호를 바인딩 해놓고 기다림 2. 클라이언트에서 서버에 요청할 포트 번호를 가지고 연결 요청 통신 보냄
3. 서버에서 수락 및 받은 포트 번호로 클라이언트 소켓 객체 생성. // 그러니까 시작부터 끝까지 하나의 포트 번호를 가지고 한다 이 말임.
4. 통신


서버용 TCP 소켓 프로그래밍 순서
1. 서버의 포트 번호 정함
2. 서버용 소켓 객체 생성
3. 클라이언트 쪽에서 접속 요청이 오길 기다림
4. 접속 요청이 오면 요청 수락 후 해당 클라이언트에 대한 소켓 객체 생성
5. 연결된 클라이언트와 입출력 스트림 생성
6. 보조 스트림을 통해 성능 개선
7. 스트림을 통해 읽고 쓰기
8. 통신 종료


클라이언트용 TCP소켓 프로그래밍 순서
1. 서버의 IP주소와 서버가 정한 포트 번호를 매개변수로 하여 클라이언트용 소켓 객체 생성
2. 서버와의 입출력 스트림 오픈
3. 보조 스트림을 통해 성능 개선
4. 스트림을 통해 읽고 쓰기
5. 통신 종료


포트 대기 중 실수로 중지 안하고 다시 실행 시켰을 때

포트는 대기 중인데 다시 대기 하려고 하기 때문에 포트 번호를 바꾸거나 
포트를 대기 중인 프로그램을 강제 실행중지시켜야한다.

포트를 사용하는 프로그램 아이디 확인하는 법은
cmd에서 netstat -ano 라고 입력하면 포트와 그 포트를 사용하는  pid가 나옴
