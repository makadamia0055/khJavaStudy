자료형 변수명 = 초기값;
변수명 작성 규칙
- 자료형변환(기본자료형)








연산자
 - 산술 : +-*/% 정수 /정수 =정수 조심(데이터 손실 일어날 수 있음)
 - 비교 연산자
 - == 를 =과 혼동하지 말것
 - 참조변수는 ==를 이용할 때 조심. 참조변수의 ==는 값이 같은 것을 판정하는 것이 아니라 같은 객체를 공유하는지 물어보는 것

 - 논리 연산자 
 - 조건 식이 복잡하면 논리 연산자를 잘못 쓸 수 있다. 조심
if(조건식 1 || 조건식2 || 조건식 3 ){
	return;
}은 아래와 같이 풀어쓸 수 있다. 그러니 복잡하면 굳이 한번에 쓰려고 하지 말것

if(조건식 1){
 return
}

if(조건식 2){
 return
}

if(조건식 3){
 return

}

-증감연산자
 ++ -- 전위 후위 헷갈리면 그냥 과정을 나눠쓰기

 - 조건선택연산자 : 마음의 여유가 있을때 사용
 - 조건문?참일때:거짓일때;

- 대입연산자 : 오른쪽 값을 왼쪽에 저장. 덮어쓰기

조건문
	~하면 ...한다.ㅓ
	~조건식, ...: 실행문 
	if문 
	{} 생략하는 버릇 조심. 생략시 한줄만 됨.

	switch문
	-실수로 break문 빼먹는 경우 조심
	-()안에 변수 또는 식을 잘 설정

반복문
	-횟수 정하는 부분 어려움. 
	-정해져있으면 상관 없는데, 랜덤한 수 3개 저장될 때까지 등
	- 무한 루프 조심
	for(int i = 0; i<=5; a++){ => i가 아닌 a를 ++ => 무한루프
	반복문을 작성할때도 단계적으로 채워보기. 실행문까지 한번에 채우지 말고 조건에 맞는 식을 세웠는지 간단한 숫자라도 찍어서 출력해보기
	-continue; 
	-for문은 증감식으로, while, do while문은 조건식으로 이동시킴.
	-break: 반복문을 빠져나옴

for( ; ;){
A	for( ; ; ){
	B	
	}
	if(){
		break;	 둘 중 어느것을 빠져나가나. 범위 어디에 속해있나 체크해보기
	}
}

배열 : 
	- 같은 자료형의 데이터들을 모아 놓은 곳.
	- 자료들에 순서를 부여하여, 반복문 등을 사용하여 편리하게 관리 가능.
	- 배열 선언 방법 : 자료형 [] 배열명
			자료형 배열명[]
	-할당된 배열 각 번지는 자료형에 맞는 초기값으로 초기화가 된다.
	- 배열은 0번지에서 .length-1 번지 까지
	- 배열 arr에 i번지에 있는 값을 접근 : arr[i];