람다식
메소드를 조금 더 간결하게 만듦.
모든 메소드에 적용되는 것은 아님

자바 버전 8부터 함수적 프로그래밍을 위해 람다식 지원


자바에서 람다식을 수용한 이유
코드가 매우 간결해진다.
익명함수를 생성하기 위한 식
컬렉션 요소(대용량 데이터)를 필터링 또는 매핑해 쉽게 집계


자바는 람다식을 합수적 인터페이스의 익명 구현 객체로 취급
람다식 -> 매개변수를 가진 코드 블록 -> 익명 구현 객체

어떤 인터페이스를 구현할 지는 대입되는 인터페이스에 달려있음.


함수적 스타일의 람다식 작성법

(타입 매개변수, ...)-> {실행문; ...}
(int a)-> {System.out.println(a);}

리턴타입과 매소드 명을 정하지 않음. 

매개 타입은 런타임시 대입값에 따라 자동 인식(생략 가능)
하나의 매개변수만 있을 경우에는 괄호() 생략 가능
하나의 실행문만 있다면 중괄호 {} 생략 가능
매개변수 없다면 () 생략 불가
리턴값이 있는 경우 return 문 사용
중괄호에 {} return문만 있을 경우, 중괄호 생략 가능

타겟 타입(Target Type)
람다식이 대입되는 인터페이스)
익명 '구현' 객체를 만들 때 사용할 인터페이스

인터페이스 변수 = 람다식;

함수적 인터페이스
하나의 추상메소드만 선언된 인터페이스가 타겟타입
@Functiionalinterface 어노테이션
하나의 추상 메소드만을 가지는지 컴파일러가 체크
=> 딱 그거만 구현하면 되는 상태일 때

두개 이상의 추상 메소드가 선언되어 있으면 컴파일 오류 발생